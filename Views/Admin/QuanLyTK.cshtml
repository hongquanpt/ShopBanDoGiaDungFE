@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="wrapper">

    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <!-- Main content -->
        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <!-- Nút quản lý chức vụ bên ngoài bảng -->
                               
                    <div class="col-12">


                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <label class="card-title">Quản lý tài khoản</label>
                                
                            </div>


                            <!-- /.card-header -->
                            <div class="card-body">

                                <!-- Bảng hiển thị tài khoản -->
                                <table id="userTable" class="table table-bordered table-striped">
                                    <thead>
                                        <tr>
                                            <th>Mã TK</th>
                                            <th>Họ tên</th>
                                            <th>Ngày sinh</th>
                                            <th>Địa chỉ</th>
                                            <th>Số điện thoại</th>
                                            <th>Email</th>
                                            <th>Chức vụ</th>
                                            <th>Quản lý quyền</th>
                                            <th>Xóa</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Dữ liệu sẽ được thêm vào bằng JavaScript -->
                                    </tbody>
                                </table>
                                <!-- /.card-body -->
                            </div>
                            <!-- /.card-header -->
                             <button class="btn btn-secondary" id="manageRolesButton">Quản lý quyền của từng chức vụ</button>
                            <!-- /.card-body -->
                        </div>
                        <!-- /.card -->

                    </div>
                    <!-- Nút thêm tài khoản mới -->
                    <!-- /.col -->

                </div>
                <!-- /.row -->

        </section>

    </div>

</div>

<!-- Modal Quản Lý Roles của Người Dùng -->
<div class="modal fade" id="permissionModal" tabindex="-1" role="dialog" aria-labelledby="permissionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <!-- Tiêu đề Modal -->
            <div class="modal-header">
                <h5 class="modal-title" id="permissionModalLabel">Quyền hiện tại của tài khoản</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Đóng">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <!-- Nội dung Modal -->
            <div class="modal-body">
                <!-- Cây chức vụ sẽ được tải ở đây -->
                <div id="permissionTree"></div>
            </div>
            <!-- Chân Modal -->
            <div class="modal-footer">
                @*  <button type="button" class="btn btn-primary save-permissions">Lưu</button> *@
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Quản Lý Chức Vụ và Quyền -->
<div class="modal fade" id="manageRolesModal" tabindex="-1" role="dialog" aria-labelledby="manageRolesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <!-- Tiêu đề Modal -->
            <div class="modal-header">
                <h5 class="modal-title" id="manageRolesModalLabel">Quản lý quyền của từng chức vụ</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Đóng">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <!-- Nội dung Modal -->
            <div class="modal-body">
                <!-- Cây quyền cho chức vụ -->
                <div id="manageRolesTree"></div>
            </div>
            <!-- Chân Modal -->
            <div class="modal-footer">
                <button type="button" class="btn btn-primary save-roles-permissions">Lưu</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>


<!-- Bao gồm các script cần thiết -->
<!-- Select2 CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />

<!-- jQuery -->
<script src="~/Admin/plugins/jquery/jquery.min.js"></script>
<!-- Bootstrap 4 -->
<script src="~/Admin/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- DataTables & Plugins -->
<link rel="stylesheet" href="~/Admin/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/Admin/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
<script src="~/Admin/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/Admin/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
<script src="~/Admin/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
<script src="~/Admin/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
<!-- jsTree -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/themes/default/style.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/jstree.min.js"></script>
<!-- Select2 JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
<!-- AdminLTE App -->
<script src="~/Admin/dist/js/adminlte.min.js"></script>

<script>
    $(document).ready(function () {
        // Sử dụng async/await để xử lý các yêu cầu bất đồng bộ
        (async function () {
            try {
                // Lấy token từ localStorage
                const token = localStorage.getItem('token');
                if (!token) {
                    // Chưa đăng nhập, chuyển hướng đến trang đăng nhập
                    window.location.href = '/login';
                    return;
                }

                // Giải mã token để lấy vai trò
                const decodedToken = jwt_decode(token);
                const userRolesFromToken = decodedToken.role;

                // Kiểm tra xem người dùng có vai trò 'admin' không
                let isAdmin = false;
                if (Array.isArray(userRolesFromToken)) {
                    isAdmin = userRolesFromToken.includes('admin');
                } else {
                    isAdmin = userRolesFromToken === 'admin';
                }

                if (!isAdmin) {
                    alert('Bạn không có quyền truy cập trang này.');
                    window.location.href = '/'; // Chuyển hướng đến trang chủ hoặc trang thông báo
                    return;
                }

                // Hàm để gọi API với token
                const apiCall = async (url, method = 'GET', data = null) => {
                    const options = {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + token
                        }
                    };
                    if (data) {
                        options.body = JSON.stringify(data);
                    }
                    const response = await fetch(url, options);
                    let responseData = null;
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        responseData = await response.json();
                    }
                    if (!response.ok) {
                        throw responseData || { message: 'Không thể thực hiện yêu cầu.' };
                    }
                    return responseData;
                };

                // Gọi API để lấy danh sách chức vụ
                let allRoles = [];
                async function getAllRoles() {
                    try {
                        const roles = await apiCall('https://localhost:7248/api/ChucVu');
                        allRoles = roles; // Lưu danh sách roles để sử dụng trong loadUsers
                        return roles;
                    } catch (error) {
                        console.error('Lỗi khi lấy danh sách chức vụ:', error);
                        alert('Không thể tải danh sách chức vụ.');
                        return [];
                    }
                }

                // Gọi API để lấy danh sách chức năng
                async function getAllFunctions() {
                    try {
                        const functions = await apiCall('https://localhost:7248/api/ChucNang');
                        return functions;
                    } catch (error) {
                        console.error('Lỗi khi lấy danh sách chức năng:', error);
                        alert('Không thể tải danh sách chức năng.');
                        return [];
                    }
                }

                // Gọi API để lấy danh sách hành động
                async function getAllActions() {
                    try {
                        const actions = await apiCall('https://localhost:7248/api/HanhDong');
                        return actions;
                    } catch (error) {
                        console.error('Lỗi khi lấy danh sách hành động:', error);
                        alert('Không thể tải danh sách hành động.');
                        return [];
                    }
                }

                // Gọi API để lấy danh sách tài khoản
                async function loadUsers() {
                    try {
                        const users = await apiCall('https://localhost:7248/api/TaiKhoan');

                        const tbody = $('#userTable tbody');
                        tbody.empty();
                        console.log(users);
                        users.forEach(user => {
                            // Tạo HTML cho chức vụ với Select2
                            const rolesHtml = `
                                <select class="form-control role-select" multiple="multiple" style="width: 100%;" data-user-id="${user.maTaiKhoan}">
                                    ${allRoles.map(role => `
                                        <option value="${role.maChucVu}" ${user.chucVus.some(tc => tc.maChucVu === role.maChucVu) ? 'selected' : ''}>
                                            ${role.tenChucVu}
                                        </option>
                                    `).join('')}
                                </select>
                            `;

                            const row = `
                                <tr>
                                    <td>${user.maTaiKhoan}</td>
                                    <td>${user.ten}</td>
                                    <td>${user.ngaySinh ? new Date(user.ngaySinh).toLocaleDateString() : 'Không xác định'}</td>
                                    <td>${user.diaChi}</td>
                                    <td>${user.sdt}</td>
                                    <td>${user.email}</td>
                                    <td>${rolesHtml}</td>
                                    <td>
                                        <button class="btn btn-primary manage-permissions" data-user-id="${user.maTaiKhoan}">Xem quyền</button>
                                    </td>
                                    <td><button class="btn btn-danger delete-user" data-user-id="${user.maTaiKhoan}">Xóa</button></td>
                                </tr>
                            `;
                            tbody.append(row);
                        });

                        // Khởi tạo hoặc cập nhật DataTable
                        if ($.fn.DataTable.isDataTable('#userTable')) {
                            $('#userTable').DataTable().destroy();
                        }
                        $('#userTable').DataTable({
                            "paging": true,
                            "ordering": true,
                            "info": true,
                            "searching": true,
                            "language": {
                                "paginate": {
                                    "next": "Trang sau",
                                    "previous": "Trang trước"
                                },
                                "info": "Hiển thị từ _START_ đến _END_ của _TOTAL_ tài khoản",
                                "search": "Tìm kiếm:"
                            }
                        });

                        // Khởi tạo Select2 cho các select trong cột Chức vụ
                        $('.role-select').select2({
                            placeholder: "Chọn chức vụ",
                            allowClear: true
                        });

                        // Xử lý sự kiện thay đổi chức vụ cho từng user
                        $('.role-select').on('change', async function () {
                            const userId = $(this).data('user-id');
                            const selectedRoles = $(this).val() || [];

                            try {
                                // Gửi danh sách roleIds lên API (sử dụng POST)
                                await apiCall(`https://localhost:7248/api/TaiKhoan/${userId}/roles`, 'POST', { roleIds: selectedRoles.map(id => parseInt(id)) });
                                alert('Cập nhật chức vụ thành công');
                                loadUsers(); // Tải lại danh sách người dùng sau khi cập nhật
                            } catch (error) {
                                console.error('Lỗi khi cập nhật chức vụ:', error);
                                if (error.message) {
                                    alert('Lỗi: ' + error.message);
                                } else {
                                    alert('Không thể cập nhật chức vụ.');
                                }
                            }
                        });
                    } catch (error) {
                        console.error('Lỗi khi lấy danh sách tài khoản:', error);
                        alert('Không thể tải danh sách tài khoản.');
                    }
                }

                // Define a mapping from actionId to actionName
                // **Please update the mapping based on your actual action IDs**
                const actionIdMap = {
                    '1': 'Xem',
                    '2': 'Them',
                    '3': 'Sua',
                    '4': 'Xoa'
                    // Add more mappings if there are additional actions
                };

                // Xử lý sự kiện xóa tài khoản
                $(document).on('click', '.delete-user', async function () {
                    const userId = $(this).data('user-id');

                    if (confirm('Bạn có chắc chắn muốn xóa tài khoản này?')) {
                        try {
                            await apiCall(`https://localhost:7248/api/TaiKhoan/${userId}`, 'DELETE');
                            alert('Xóa tài khoản thành công');
                            loadUsers();
                        } catch (error) {
                            console.error('Lỗi khi xóa tài khoản:', error);
                            alert('Không thể xóa tài khoản.');
                        }
                    }
                });

                // Xử lý sự kiện "Quản lý quyền" của người dùng
                $(document).on('click', '.manage-permissions', async function () {
                    const userId = $(this).data('user-id');
                    openPermissionModal(userId);
                });

                // Hàm mở modal và tải cây quyền cho người dùng
                async function openPermissionModal(userId) {
                    try {
                        // Tải tất cả các chức năng và hành động
                        const [allFunctions, allActions] = await Promise.all([
                            getAllFunctions(),
                            getAllActions()
                        ]);

                        // Lấy tất cả các chức vụ được gán cho người dùng
                        const userRoles = await apiCall(`https://localhost:7248/api/TaiKhoan/${userId}/roles`);

                        // Lấy quyền của từng chức vụ được gán cho người dùng
                        const rolePermissionsPromises = userRoles.map(role =>
                            apiCall(`https://localhost:7248/api/ChucVu/${role.maChucVu}/permissions`)
                                .then(perms => ({ roleId: role.maChucVu, permissions: perms }))
                                .catch(err => {
                                    console.error(`Lỗi khi lấy quyền của chức vụ ${role.maChucVu}:`, err);
                                    return { roleId: role.maChucVu, permissions: [] };
                                })
                        );

                        const rolesWithPermissions = await Promise.all(rolePermissionsPromises);

                        // Tạo một bản đồ để dễ dàng tra cứu quyền theo chức vụ và chức năng
                        const rolePermissionMap = {};
                        rolesWithPermissions.forEach(rolePerm => {
                            rolePermissionMap[rolePerm.roleId] = rolePerm.permissions;
                        });

                        // Hàm đổi tên chức năng và hành động
                        const renamePermissions = (name) => {
                            const renameMap = {
                                "Xem": "Xem",
                                "Them": "Thêm",
                                "Sua": "Sửa",
                                "Xoa": "Xóa",
                                "QuanLyTaiKhoan": "Quản lý tài khoản",
                                "QuanLySanPham": "Quản lý sản phẩm",
                                "QuanLyDanhMuc": "Quản lý danh mục",
                                "QuanLyHang": "Quản lý hãng",
                                "QuanLyDonHang": "Quản lý đơn hàng",
                                "ThongKe":"Thống kê",
                                "Access": "Truy cập"
                            };
                            return renameMap[name] || name;
                        };

                        // Xây dựng dữ liệu cho jsTree (chỉ hiển thị chức năng và hành động)
                        const treeData = allFunctions.map(func => {
                            // Kiểm tra quyền của người dùng đối với chức năng này
                            const funcPermissions = rolesWithPermissions.flatMap(rolePerm =>
                                rolePerm.permissions.filter(p => p.maChucNang === func.maChucNang)
                            );

                            // Kiểm tra nếu chức năng này có quyền
                            const hasFuncPermission = funcPermissions.length > 0;

                            // Tạo node cho chức năng
                            const funcNode = {
                                id: `func-${func.maChucNang}`,
                                text: renamePermissions(func.tenChucNang),  // Áp dụng đổi tên cho chức năng
                                state: {
                                    selected: hasFuncPermission
                                },
                                children: allActions.map(action => {
                                    // Kiểm tra quyền cho hành động này
                                    const hasActionPermission = funcPermissions.some(p => p.maHanhDong === action.maHanhDong);
                                    return {
                                        id: `perm-${func.maChucNang}-${action.maHanhDong}`,
                                        text: renamePermissions(action.tenHanhDong),  // Áp dụng đổi tên cho hành động
                                        state: {
                                            selected: hasActionPermission
                                        }
                                    };
                                })
                            };

                            return funcNode;
                        });

                        // Khởi tạo jsTree với cấu hình cascade 'none' để không tự động chọn cha hoặc con
                        $('#permissionTree').jstree('destroy');
                        $('#permissionTree').jstree({
                            'core': {
                                'data': treeData
                            },
                            'checkbox': {
                                'keep_selected_style': false,
                                'three_state': false,
                                'cascade': 'none' // Không cascade chọn
                            },
                            'plugins': ['checkbox']
                        });

                        // Lưu userId vào data của modal để sử dụng khi lưu
                        $('#permissionModal').data('user-id', userId).modal('show');

                    } catch (error) {
                        console.error('Lỗi khi mở modal quản lý quyền:', error);
                        alert('Không thể mở modal quản lý quyền.');
                    }
                }

                // Xử lý sự kiện lưu chức vụ cho người dùng
                $('.save-permissions').on('click', async function () {
                    try {
                        const userId = $('#permissionModal').data('user-id');
                        const selectedNodes = $('#permissionTree').jstree('get_selected', true);

                        // Tạo cấu trúc dữ liệu để lưu
                        const rolesToAssign = [];
                        const permissionsToAssign = {};

                        selectedNodes.forEach(node => {
                            if (node.id.startsWith('role-') && node.parent === '#') {
                                const roleId = parseInt(node.id.split('-')[1]);
                                rolesToAssign.push(roleId);
                                if (!permissionsToAssign[roleId]) {
                                    permissionsToAssign[roleId] = [];
                                }
                            } else if (node.id.startsWith('perm-')) {
                                const parts = node.id.split('-');
                                const roleId = parseInt(parts[1]);
                                const maChucNang = parseInt(parts[2]);
                                const maHanhDong = parseInt(parts[3]);

                                if (!permissionsToAssign[roleId]) {
                                    permissionsToAssign[roleId] = [];
                                }

                                permissionsToAssign[roleId].push({
                                    MaChucNang: maChucNang,
                                    MaHanhDong: maHanhDong,
                                    MaDonVi: 1 // Giả sử bạn có trường MaDonVi, thay đổi nếu cần
                                });
                            }
                        });

                        // Gửi các chức vụ được chọn lên API (sử dụng POST)
                        await apiCall(`https://localhost:7248/api/TaiKhoan/${userId}/roles`, 'POST', { roleIds: rolesToAssign });

                        // Gửi các quyền được chọn cho từng chức vụ lên API (sử dụng POST)
                        const permissionPromises = Object.keys(permissionsToAssign).map(roleId => {
                            return apiCall(`https://localhost:7248/api/ChucVu/${roleId}/permissions`, 'POST', { permissions: permissionsToAssign[roleId] });
                        });

                        await Promise.all(permissionPromises);

                        alert('Cập nhật quyền thành công');
                        $('#permissionModal').modal('hide');
                        loadUsers(); // Tải lại danh sách người dùng sau khi cập nhật

                    } catch (error) {
                        console.error('Lỗi khi cập nhật quyền:', error);
                        if (error.message) {
                            alert('Lỗi: ' + error.message);
                        } else {
                            alert('Không thể cập nhật quyền.');
                        }
                    }
                });

                // Xử lý sự kiện mở modal quản lý chức vụ
                $('#manageRolesButton').on('click', async function () {
                    openManageRolesModal();
                });

                async function openManageRolesModal() {
                    try {
                        console.log("Hàm openManageRolesModal được gọi");

                        // Tải tất cả các chức vụ, chức năng và hành động
                        const [allRoles, allFunctions, allActions] = await Promise.all([
                            getAllRoles(),
                            getAllFunctions(),
                            getAllActions()
                        ]);

                        // Lấy tất cả các quyền của mỗi chức vụ
                        const rolePermissionsPromises = allRoles.map(role =>
                            apiCall(`https://localhost:7248/api/ChucVu/${role.maChucVu}/permissions`)
                                .then(perms => ({ roleId: role.maChucVu, permissions: perms }))
                                .catch(err => {
                                    console.error(`Lỗi khi lấy quyền của chức vụ ${role.maChucVu}:`, err);
                                    return { roleId: role.maChucVu, permissions: [] };
                                })
                        );

                        const rolesWithPermissions = await Promise.all(rolePermissionsPromises);

                        // Tạo một bản đồ để dễ dàng tra cứu quyền theo chức vụ và chức năng
                        const rolePermissionMap = {};
                        rolesWithPermissions.forEach(rolePerm => {
                            rolePermissionMap[rolePerm.roleId] = rolePerm.permissions;
                        });

                        // Hàm đổi tên chức năng và hành động
                        const renamePermissions = (name) => {
                            const renameMap = {
                                "Xem": "Xem",
                                "Them": "Thêm",
                                "Sua": "Sửa",
                                "Xoa": "Xóa",
                                "QuanLyTaiKhoan": "Quản lý tài khoản",
                                "QuanLySanPham": "Quản lý sản phẩm",
                                "QuanLyDanhMuc": "Quản lý danh mục",
                                "QuanLyHang": "Quản lý hãng",
                                "QuanLyDonHang": "Quản lý đơn hàng",
                                "ThongKe": "Thống kê",
                                "Access": "Truy cập"
                            };
                            return renameMap[name] || name;
                        };

                        // Xây dựng dữ liệu cho jsTree
                        const treeData = allRoles.map(role => {
                            const rolePermissions = rolePermissionMap[role.maChucVu] || [];
                            return {
                                id: `role-${role.maChucVu}`,
                                text: renamePermissions(role.tenChucVu),  // Đổi tên chức vụ
                                state: { selected: false }, // Mặc định không chọn
                                children: allFunctions.map(func => {
                                    const funcPermissions = rolePermissions.filter(p => p.maChucNang === func.maChucNang);
                                    return {
                                        id: `func-${role.maChucVu}-${func.maChucNang}`,
                                        text: renamePermissions(func.tenChucNang),  // Đổi tên chức năng
                                        state: { selected: funcPermissions.length > 0 },
                                        children: allActions.map(action => {
                                            const hasPermission = rolePermissions.some(p => p.maChucNang === func.maChucNang && p.maHanhDong === action.maHanhDong);
                                            return {
                                                id: `perm-${role.maChucVu}-${func.maChucNang}-${action.maHanhDong}`,
                                                text: renamePermissions(action.tenHanhDong),  // Đổi tên hành động
                                                state: { selected: hasPermission }
                                            };
                                        })
                                    };
                                })
                            };
                        });

                        $('#manageRolesTree').jstree('destroy'); // Destroy any previous instance
                        console.log("Khởi tạo jsTree..."); // Debugging log
                        $('#manageRolesTree').jstree({
                            'core': { 'data': treeData },
                            'checkbox': {
                                'keep_selected_style': false,
                                'three_state': false,
                                'cascade': 'none' // Không cascade chọn
                            },
                            'plugins': ['checkbox']
                        });

                        // Thêm sự kiện tự động chọn "Xem" khi "Thêm", "Sửa" hoặc "Xóa" được chọn
                        $('#manageRolesTree').on('changed.jstree', function (e, data) {
                            // Kiểm tra nếu là sự kiện thay đổi nút
                            const node = data.node;
                            console.log('Checked node:', node.text, node.id); // Debugging khi node được check
                            if (isActionChecked(node.id)) {
                                autoCheckViewPermission(node.id);
                            } else if (isActionUnchecked(node.id)) {
                                autoUncheckActions(node.id);
                            }
                        });

                        // Mở modal và thiết lập aria-hidden
                        $('#manageRolesModal').removeAttr('aria-hidden').modal('show');
                        $('#manageRolesModal').on('shown.bs.modal', function () {
                            $(this).find('button').first().focus();
                        });

                    } catch (error) {
                        console.error('Lỗi khi mở modal quản lý quyền:', error);
                    }
                }

                // Kiểm tra xem quyền đó có phải là "Thêm", "Sửa", "Xóa" hay không
                function isActionChecked(nodeId) {
                    const parts = nodeId.split('-');
                    return parts.length === 4 && ['2', '3', '4'].includes(parts[3]); // 2: Thêm, 3: Sửa, 4: Xóa
                }

                // Kiểm tra xem quyền đó có phải là "Xem" hay không
                function isActionUnchecked(nodeId) {
                    const parts = nodeId.split('-');
                    return parts.length === 4 && parts[3] === '1'; // 1: Xem
                }

                // Tự động chọn quyền "Xem" khi quyền "Thêm", "Sửa", "Xóa" được chọn
                function autoCheckViewPermission(nodeId) {
                    const parts = nodeId.split('-');
                    const roleId = parts[1];
                    const funcId = parts[2];

                    const xemActionId = findActionIdByName('Xem');
                    if (!xemActionId) return;

                    const viewNodeId = `perm-${roleId}-${funcId}-${xemActionId}`;
                    const tree = $('#manageRolesTree').jstree(true);
                    const viewNode = tree.get_node(viewNodeId);
                    if (viewNode && !tree.is_checked(viewNode.id)) {
                        tree.check_node(viewNode.id);
                        console.log('Auto-checking "Xem" node:', viewNode.text, viewNode.id);
                    }
                }

                // Tự động bỏ chọn quyền "Thêm", "Sửa", "Xóa" khi quyền "Xem" bị bỏ chọn
                function autoUncheckActions(nodeId) {
                    const parts = nodeId.split('-');
                    const roleId = parts[1];
                    const funcId = parts[2];

                    const themActionId = findActionIdByName('Them');
                    const suaActionId = findActionIdByName('Sua');
                    const xoaActionId = findActionIdByName('Xoa');
                    if (!themActionId || !suaActionId || !xoaActionId) return;

                    const tree = $('#manageRolesTree').jstree(true);
                    uncheckActionNode(tree, roleId, funcId, themActionId);
                    uncheckActionNode(tree, roleId, funcId, suaActionId);
                    uncheckActionNode(tree, roleId, funcId, xoaActionId);
                }

                // Trả về ID hành động theo tên
                function findActionIdByName(actionName) {
                    return Object.keys(actionIdMap).find(key => actionIdMap[key] === actionName);
                }

                // Bỏ chọn node hành động
                function uncheckActionNode(tree, roleId, funcId, actionId) {
                    const nodeId = `perm-${roleId}-${funcId}-${actionId}`;
                    const node = tree.get_node(nodeId);
                    if (node && tree.is_checked(node.id)) {
                        tree.uncheck_node(node.id);
                        console.log(`Auto-unchecking "${node.text}" node:`, node.id);
                    }
                }


                // Xử lý sự kiện lưu chức vụ và quyền
                $('.save-roles-permissions').on('click', async function () {
                    try {
                        const selectedNodes = $('#manageRolesTree').jstree('get_selected', true);

                        // Tạo cấu trúc dữ liệu để lưu
                        const permissionsByRole = {};

                        selectedNodes.forEach(node => {
                            if (node.id.startsWith('perm-')) {
                                const parts = node.id.split('-');
                                const roleId = parseInt(parts[1]);
                                const maChucNang = parseInt(parts[2]);
                                const maHanhDong = parseInt(parts[3]);

                                if (!permissionsByRole[roleId]) {
                                    permissionsByRole[roleId] = [];
                                }

                                permissionsByRole[roleId].push({
                                    MaChucNang: maChucNang,
                                    MaHanhDong: maHanhDong,
                                    MaDonVi: 1 // Giả sử bạn có trường MaDonVi, thay đổi nếu cần
                                });
                            }
                        });

                        // Gửi các quyền được chọn cho từng chức vụ lên API (sử dụng POST)
                        const permissionPromises = Object.keys(permissionsByRole).map(roleId => {
                            return apiCall(`https://localhost:7248/api/ChucVu/${roleId}/permissions`, 'POST', { permissions: permissionsByRole[roleId] });
                        });

                        await Promise.all(permissionPromises);

                        alert('Cập nhật chức vụ và quyền thành công');
                        $('#manageRolesModal').modal('hide');
                        loadUsers(); // Tải lại danh sách người dùng sau khi cập nhật
                    } catch (error) {
                        console.error('Lỗi khi cập nhật chức vụ và quyền:', error);
                        if (error.message) {
                            alert('Lỗi: ' + error.message);
                        } else {
                            alert('Không thể cập nhật chức vụ và quyền.');
                        }
                    }
                });

                // Tải danh sách chức vụ trước khi tải người dùng để đảm bảo danh sách roles có sẵn
                await getAllRoles();
                // Tải danh sách người dùng khi trang được tải
                loadUsers();

            } catch (generalError) {
                console.error('Lỗi chung:', generalError);
                alert('Đã xảy ra lỗi. Vui lòng thử lại sau.');
            }
        })();
    });
</script>
